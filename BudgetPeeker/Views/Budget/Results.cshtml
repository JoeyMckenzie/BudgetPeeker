@using BudgetPeeker.Models
@model BudgetResultsViewModel

@{
    ViewBag.Title = "Results";
    Layout = "_Layout";
    bool negativeBudget = Model.TotalBudget != null && Model.TotalBudget < 0;

    @* Get selectors to dynamically updated based on filters *@
    var includeFiscalYear = Model.InputSelectors.FiscalYear.Split(" ")[0];
    var includeAccountCategory = Model.InputSelectors.AccountCategory.Split(" ")[0];
    var includeOperatingUnit = Model.InputSelectors.OperatingUnit.Split(" ")[0];
    var includeDepartmentDivision = Model.InputSelectors.DepartmentDivision.Split(" ")[0];

    @* Exclude budget if all results are pulled, causes SQL integer overflow *@
    var exclusionaryTerms = new List<string> {"All", "Select"};
    var excludeBudget = exclusionaryTerms.Contains(includeAccountCategory) && exclusionaryTerms.Contains(includeDepartmentDivision)
                        && exclusionaryTerms.Contains(includeFiscalYear) && exclusionaryTerms.Contains(includeOperatingUnit);

    @* Get the current entity state *@
    var selectedFiscalYear = Model.InputSelectors.FiscalYear;
    var selectedAccountCategory = Model.InputSelectors.AccountCategory;
    var selectedOperatingUnit = Model.InputSelectors.OperatingUnit;
    var selectedDepartmentDivision = Model.InputSelectors.DepartmentDivision;
    var selectedSortBy = Model.InputSelectors.SortBy;

    @* Initialize dropdowns *@
    var filteredFiscalYearDropdown = new SelectList(Model.FilteredBudgetLists.FilteredFiscalYearList);
    var filteredAccountCategoryDropdown = new SelectList(Model.FilteredBudgetLists.FilteredAccountCategoryList);
    var filteredDepartmentDivisionDropdown = new SelectList(Model.FilteredBudgetLists.FilteredDepartmentDivisionList);
    var filteredOperatingUnitDropdown = new SelectList(Model.FilteredBudgetLists.FilteredOperatingUnitList);

    @* If filtered by other fields causes uniqueness in another, remove option to filter that field *@
    var initialFiscalYear = Model.FilteredBudgetLists.FilteredFiscalYearList[0];
    var initialAccountCategory = Model.FilteredBudgetLists.FilteredAccountCategoryList[0];
    var initialDepartmentDivision = Model.FilteredBudgetLists.FilteredDepartmentDivisionList[0];
    var initialOperatingUnit = Model.FilteredBudgetLists.FilteredOperatingUnitList[0];
}

<div class="row">
    <div class="container col-lg-6">
        <h2>Results</h2>
        <hr/>
        <p><strong>Fiscal Year:</strong> @(Model.FilteredBudgetLists.FilteredFiscalYearList.Count == 1 ? initialFiscalYear : (includeFiscalYear == "Select" ? "No fiscal year selected" : Model.InputSelectors.FiscalYear))</p>
        <p><strong>Department Division:</strong> @(Model.FilteredBudgetLists.FilteredDepartmentDivisionList.Count == 1 ? initialDepartmentDivision : (includeDepartmentDivision == "Select" ? "No department division selected" : Model.InputSelectors.DepartmentDivision))</p>
        <p><strong>Account Category:</strong> @(Model.FilteredBudgetLists.FilteredAccountCategoryList.Count == 1 ? initialAccountCategory : (includeAccountCategory == "Select" ? "No account category selected" : Model.InputSelectors.AccountCategory))</p>
        <p><strong>Operating Unit:</strong> @(Model.FilteredBudgetLists.FilteredOperatingUnitList.Count == 1 ? initialOperatingUnit : (includeOperatingUnit == "Select" ? "No operating unit selected" : Model.InputSelectors.OperatingUnit))</p>
        @if (!excludeBudget)
        {
            if (negativeBudget)
            {
                <p><strong>Total Budget:</strong> @string.Format("$({0:n0})", Model.TotalBudget)</p>
            }
            else
            {
                <p><strong>Total Budget:</strong> @string.Format("${0:n0}", Model.TotalBudget)</p>
            }
        }
        <p><strong>Number of Pages:</strong> @Model.NumberOfPages</p>
        
        
        @* Go to page *@
        <form method="get" asp-controller="Budget" asp-action="Results">
            <div class="form-group form-inline">
                <label style="padding-right: 10px;"><strong>Go to page:</strong></label>
                <select onchange="this.form.submit()" asp-for="Page" class="custom-select">
                    @for (int pageNumber = 1; pageNumber <= Model.NumberOfPages; pageNumber++)
                    {
                        <option value="@pageNumber">@pageNumber</option>
                    }
                </select>
            </div>
            
            <input type="hidden" name="FiscalYear" value="@Model.InputSelectors.FiscalYear"/>
            <input type="hidden" name="AccountCategory" value="@Model.InputSelectors.AccountCategory"/>
            <input type="hidden" name="DepartmentDivision" value="@Model.InputSelectors.DepartmentDivision"/>
            <input type="hidden" name="OperatingUnit" value="@Model.InputSelectors.OperatingUnit"/>
            <input type="hidden" name="OrderBudgetBy" value="@Model.InputSelectors.OrderBudgetBy"/>
            <input type="hidden" name="SortBy" value="@Model.InputSelectors.SortBy"/>
        </form>
        
            
        @* Sort fields alphabetically *@
        <form method="get" asp-controller="Budget" asp-action="Results">
            <div class="form-group form-inline">
                <label style="padding-right: 10px;" asp-for="SortBy"><strong>Sort fields by: </strong></label>
                <select onchange="this.form.submit()" asp-for="SortBy" asp-items="@ViewBag.SortFieldsByList" class="custom-select">
                    <option disabled selected>Sort fields by</option>
                </select>
            </div>
 
            <input type="hidden" name="FiscalYear" value="@Model.InputSelectors.FiscalYear"/>
            <input type="hidden" name="AccountCategory" value="@Model.InputSelectors.AccountCategory"/>
            <input type="hidden" name="DepartmentDivision" value="@Model.InputSelectors.DepartmentDivision"/>
            <input type="hidden" name="OperatingUnit" value="@Model.InputSelectors.OperatingUnit"/>
            <input type="hidden" name="OrderBudgetBy" value="@Model.InputSelectors.OrderBudgetBy"/>
            <input type="hidden" name="Page" value="@Model.InputSelectors.Page"/>
        </form>    
        

        @* Order budget selector *@
        <form method="get" asp-controller="Budget" asp-action="Results">
            <div class="form-group form-inline">
                <label style="padding-right: 10px;" asp-for="OrderBudgetBy"><strong>Order budget by: </strong></label>
                <select onchange="this.form.submit()" asp-for="OrderBudgetBy" asp-items="@ViewBag.OrderBudgetByList" class="custom-select">
                    <option disabled selected>Sort budget by</option>
                </select>
            </div>
             
            <input type="hidden" name="FiscalYear" value="@Model.InputSelectors.FiscalYear"/>
            <input type="hidden" name="AccountCategory" value="@Model.InputSelectors.AccountCategory"/>
            <input type="hidden" name="DepartmentDivision" value="@Model.InputSelectors.DepartmentDivision"/>
            <input type="hidden" name="OperatingUnit" value="@Model.InputSelectors.OperatingUnit"/>
            <input type="hidden" name="SortBy" value="@Model.InputSelectors.SortBy"/>
            <input type="hidden" name="Page" value="@Model.InputSelectors.Page"/>
        </form>

        <p><strong>Number of results:</strong> @string.Format("{0:n0}", Model.ResultsCount)</p>

    </div>
    
    <div class="container col-lg-6">
        <h2>Filter Fields</h2>
        <hr/>
        
        @* Filter Fiscal Year *@
        <form method="get" asp-controller="Budget" asp-action="Results">

            <div class="form-group form-inline">
                @if (Model.FilteredBudgetLists.FilteredFiscalYearList.Count() == 1)
                {
                    <label style="padding-right: 10px;">
                        <p>
                            <strong>Fiscal Year: </strong>@initialFiscalYear</p>
                    </label>
                }
                else
                {
                    <label asp-for="InputSelectors.FiscalYear" style="padding-right: 10px;">
                        <strong>Fiscal Year: </strong>
                    </label>
                    <select name="FiscalYear" onchange="this.form.submit()"  asp-items="@filteredFiscalYearDropdown" class="custom-select">
                        <option disabled selected>Filter by fiscal year</option>
                        <option>All fiscal years</option>
                    </select>
                }
            </div>
            
            <input type="hidden" name="FiscalYear" value="@Model.InputSelectors.FiscalYear"/>
            <input type="hidden" name="AccountCategory" value="@selectedAccountCategory"/>
            <input type="hidden" name="DepartmentDivision" value="@selectedDepartmentDivision"/>
            <input type="hidden" name="OperatingUnit" value="@selectedOperatingUnit"/>
            <input type="hidden" name="OrderBudgetBy" value="@Model.InputSelectors.OrderBudgetBy"/>
            <input type="hidden" name="Page" value="1"/>
            <input type="hidden" name="SortBy" value="@selectedSortBy"/>
        </form>
                

        @* Department Division *@
        <form method="get" asp-controller="Budget" asp-action="Results">
            <div class="form-group form-inline">
                @if (Model.FilteredBudgetLists.FilteredDepartmentDivisionList.Count() == 1)
                {
                    <label style="padding-right: 10px;">
                        <p><strong>Department Division: </strong>@initialDepartmentDivision</p>
                    </label>
                }
                else
                {
                    <label style="padding-right: 10px;">
                        <strong>Department Division: </strong>
                    </label>
                    <select name="DepartmentDivision" onchange="this.form.submit()" asp-items="@filteredDepartmentDivisionDropdown" class="custom-select">                       
                        <option disabled selected>Filter by department division</option>
                        <option>All department divisions</option>
                    </select>
                }
            </div>
            
            <input type="hidden" name="FiscalYear" value="@selectedFiscalYear"/>
            <input type="hidden" name="AccountCategory" value="@selectedAccountCategory"/>
            <input type="hidden" name="DepartmentDivision" value="@Model.InputSelectors.DepartmentDivision"/>
            <input type="hidden" name="OperatingUnit" value="@selectedOperatingUnit"/>
            <input type="hidden" name="OrderBudgetBy" value="@Model.InputSelectors.OrderBudgetBy"/>
            <input type="hidden" name="Page" value="1"/>
            <input type="hidden" name="SortBy" value="@selectedSortBy"/>
        </form>

            
        @* Account Category *@
        <form method="get" asp-controller="Budget" asp-action="Results">
            <div class="form-group form-inline">
                @if (Model.FilteredBudgetLists.FilteredAccountCategoryList.Count() == 1)
                {
                    <label style="padding-right: 10px;">
                        <p><strong>Account Category: </strong>@initialAccountCategory</p>
                    </label>
                }
                else
                {
                    <label style="padding-right: 10px;">
                        <strong>Account Category: </strong>
                    </label>
                    <select name="AccountCategory" onchange="this.form.submit()" asp-items="@filteredAccountCategoryDropdown" class="custom-select">
                        <option disabled selected>Filter by account category</option>
                        <option>All account categoies</option>
                    </select>
                }
            </div>   
            
            <input type="hidden" name="FiscalYear" value="@selectedFiscalYear"/>
            <input type="hidden" name="AccountCategory" value="@Model.InputSelectors.AccountCategory"/>
            <input type="hidden" name="DepartmentDivision" value="@selectedDepartmentDivision"/>
            <input type="hidden" name="OperatingUnit" value="@selectedOperatingUnit"/>
            <input type="hidden" name="OrderBudgetBy" value="@Model.InputSelectors.OrderBudgetBy"/>
            <input type="hidden" name="Page" value="1"/>
            <input type="hidden" name="SortBy" value="@selectedSortBy"/>
        </form>

        @* Operating Unit *@
        <form method="get" asp-controller="Budget" asp-action="Results">
            <div class="form-group form-inline">
                @if (Model.FilteredBudgetLists.FilteredOperatingUnitList.Count() == 1)
                {
                    <label style="padding-right: 10px;">
                        <p><strong>Operating Unit: </strong>@initialOperatingUnit</p>
                    </label>
                }
                else
                {
                    <label style="padding-right: 10px;">
                        <strong>Operating Unit: </strong>
                    </label>
                    <select name="OperatingUnit" onchange="this.form.submit()" asp-items="@filteredOperatingUnitDropdown" class="custom-select">
                        <option disabled selected>Filter by operating unit</option>
                        <option>All operating units</option>
                    </select>
                }
            </div>
            
            <input type="hidden" name="FiscalYear" value="@selectedFiscalYear"/>
            <input type="hidden" name="AccountCategory" value="@selectedAccountCategory"/>
            <input type="hidden" name="DepartmentDivision" value="@selectedDepartmentDivision"/>
            <input type="hidden" name="OperatingUnit" value="@Model.InputSelectors.OperatingUnit"/>
            <input type="hidden" name="OrderBudgetBy" value="@Model.InputSelectors.OrderBudgetBy"/>
            <input type="hidden" name="Page" value="1"/>
            <input type="hidden" name="SortBy" value="@selectedSortBy"/>
        </form>
        
        @* Get previous query *@
        <div class="form-group">
            <a id="previousResults" class="btn btn-secondary" href="javascript:history.go(-1)">Previous Results</a>
        </div>
            
        <div class="form-group">
            <a class="btn btn-primary" asp-controller="Budget" asp-action="Index" role="button">Select Different Fields</a>
        </div>
        
        @* Get CSV *@
        <div class="form-group">
            <a class="btn btn-info" href="../BudgetData.csv" download>Download CSV</a>
        </div>
    </div>
</div>

<hr/>

<partial name="_PagingPartial"/>

<div class="table-responsive">
    <table class="table">
        <tr>
            <th>Fiscal Year</th>
            <th>Department Division</th>
            <th>Account Category</th>
            <th>Operating Unit</th>
            <th>Budget Amount</th>
        </tr>
        
        @foreach (var item in Model.QueryResults)
        {
            <tr>
                <td>@item.FiscalYear</td>
                <td>@item.DepartmentDivision</td>
                <td>@item.AccountCategory</td>
                <td>@item.OperatingUnit</td>
                @if (item.BudgetAmount != null && item.BudgetAmount < 0)
                {
                    <td>@string.Format("$({0:n0})", item.BudgetAmount)</td>
                }
                else
                {
                    <td>@string.Format("${0:n0}", item.BudgetAmount)</td>
                }
            </tr>
        }
    </table>
</div>

<partial name="_PagingPartial"/>